/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ContractTransaction,
  ethers,
  Overrides,
  PopulatedTransaction,
  Signer,
} from "ethers";
import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";

interface V4QuoterInterface extends ethers.utils.Interface {
  functions: {
    "quoteExactInput(tuple)": FunctionFragment;
    "quoteExactInputSingle(tuple)": FunctionFragment;
    "quoteExactOutput(tuple)": FunctionFragment;
    "quoteExactOutputSingle(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "quoteExactInput",
    values: [
      {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactInputSingle",
    values: [
      {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactOutput",
    values: [
      {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactOutputSingle",
    values: [
      {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "quoteExactInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactOutputSingle",
    data: BytesLike
  ): Result;

  events: {};
}

export class V4Quoter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: V4QuoterInterface;

  functions: {
    quoteExactInput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteExactInputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteExactOutput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteExactOutputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  quoteExactInput(
    params: {
      exactCurrency: string;
      path: {
        intermediateCurrency: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
        hookData: BytesLike;
      }[];
      exactAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteExactInputSingle(
    params: {
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      };
      zeroForOne: boolean;
      exactAmount: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      hookData: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteExactOutput(
    params: {
      exactCurrency: string;
      path: {
        intermediateCurrency: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
        hookData: BytesLike;
      }[];
      exactAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteExactOutputSingle(
    params: {
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      };
      zeroForOne: boolean;
      exactAmount: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      hookData: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    quoteExactInput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; gasEstimate: BigNumber }
    >;

    quoteExactInputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; gasEstimate: BigNumber }
    >;

    quoteExactOutput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; gasEstimate: BigNumber }
    >;

    quoteExactOutputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; gasEstimate: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    quoteExactInput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteExactInputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteExactOutput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteExactOutputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    quoteExactInput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteExactInputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteExactOutput(
      params: {
        exactCurrency: string;
        path: {
          intermediateCurrency: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
          hookData: BytesLike;
        }[];
        exactAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteExactOutputSingle(
      params: {
        poolKey: {
          currency0: string;
          currency1: string;
          fee: BigNumberish;
          tickSpacing: BigNumberish;
          hooks: string;
        };
        zeroForOne: boolean;
        exactAmount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        hookData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
